{"changed":true,"filter":false,"title":"mais.js","tooltip":"/public/js/mais.js","value":"\n\n\nfunction autocomplete(inp, arr) {\n  /*the autocomplete function takes two arguments,\n  the text field element and an array of possible autocompleted values:*/\n  var currentFocus;\n  /*execute a function when someone writes in the text field:*/\n  inp.addEventListener(\"input\", function(e) {\n      var a, b, i, val = this.value;\n      /*close any already open lists of autocompleted values*/\n      closeAllLists();\n      if (!val) { return false;}\n      currentFocus = -1;\n      /*create a DIV element that will contain the items (values):*/\n      a = document.createElement(\"DIV\");\n      a.setAttribute(\"id\", this.id + \"autocomplete-list\");\n      a.setAttribute(\"class\", \"autocomplete-items\");\n      /*append the DIV element as a child of the autocomplete container:*/\n      this.parentNode.appendChild(a);\n      /*for each item in the array...*/\n      for (i = 0; i < arr.length; i++) {\n        /*check if the item starts with the same letters as the text field value:*/\n        if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {\n          /*create a DIV element for each matching element:*/\n          b = document.createElement(\"DIV\");\n          /*make the matching letters bold:*/\n          b.innerHTML = \"<strong>\" + arr[i].substr(0, val.length) + \"</strong>\";\n          b.innerHTML += arr[i].substr(val.length);\n          /*insert a input field that will hold the current array item's value:*/\n          b.innerHTML += \"<input type='hidden' value='\" + arr[i] + \"'>\";\n          /*execute a function when someone clicks on the item value (DIV element):*/\n              b.addEventListener(\"click\", function(e) {\n              /*insert the value for the autocomplete text field:*/\n              inp.value = this.getElementsByTagName(\"input\")[0].value;\n              /*close the list of autocompleted values,\n              (or any other open lists of autocompleted values:*/\n              closeAllLists();\n          });\n          a.appendChild(b);\n        }\n      }\n  });\n  /*execute a function presses a key on the keyboard:*/\n  inp.addEventListener(\"keydown\", function(e) {\n      var x = document.getElementById(this.id + \"autocomplete-list\");\n      if (x) x = x.getElementsByTagName(\"div\");\n      if (e.keyCode == 40) {\n        /*If the arrow DOWN key is pressed,\n        increase the currentFocus variable:*/\n        currentFocus++;\n        /*and and make the current item more visible:*/\n        addActive(x);\n      } else if (e.keyCode == 38) { //up\n        /*If the arrow UP key is pressed,\n        decrease the currentFocus variable:*/\n        currentFocus--;\n        /*and and make the current item more visible:*/\n        addActive(x);\n      } else if (e.keyCode == 13) {\n        /*If the ENTER key is pressed, prevent the form from being submitted,*/\n        e.preventDefault();\n        if (currentFocus > -1) {\n          /*and simulate a click on the \"active\" item:*/\n          if (x) x[currentFocus].click();\n        }\n      }\n  });\n  function addActive(x) {\n    /*a function to classify an item as \"active\":*/\n    if (!x) return false;\n    /*start by removing the \"active\" class on all items:*/\n    removeActive(x);\n    if (currentFocus >= x.length) currentFocus = 0;\n    if (currentFocus < 0) currentFocus = (x.length - 1);\n    /*add class \"autocomplete-active\":*/\n    x[currentFocus].classList.add(\"autocomplete-active\");\n  }\n  function removeActive(x) {\n    /*a function to remove the \"active\" class from all autocomplete items:*/\n    for (var i = 0; i < x.length; i++) {\n      x[i].classList.remove(\"autocomplete-active\");\n    }\n  }\n  function closeAllLists(elmnt) {\n    /*close all autocomplete lists in the document,\n    except the one passed as an argument:*/\n    var x = document.getElementsByClassName(\"autocomplete-items\");\n    for (var i = 0; i < x.length; i++) {\n      if (elmnt != x[i] && elmnt != inp) {\n      x[i].parentNode.removeChild(x[i]);\n    }\n  }\n}\n/*execute a function when someone clicks in the document:*/\ndocument.addEventListener(\"click\", function (e) {\n    closeAllLists(e.target);\n});\n} ","undoManager":{"mark":-2,"position":1,"stack":[[{"start":{"row":0,"column":0},"end":{"row":95,"column":2},"action":"insert","lines":["function autocomplete(inp, arr) {","  /*the autocomplete function takes two arguments,","  the text field element and an array of possible autocompleted values:*/","  var currentFocus;","  /*execute a function when someone writes in the text field:*/","  inp.addEventListener(\"input\", function(e) {","      var a, b, i, val = this.value;","      /*close any already open lists of autocompleted values*/","      closeAllLists();","      if (!val) { return false;}","      currentFocus = -1;","      /*create a DIV element that will contain the items (values):*/","      a = document.createElement(\"DIV\");","      a.setAttribute(\"id\", this.id + \"autocomplete-list\");","      a.setAttribute(\"class\", \"autocomplete-items\");","      /*append the DIV element as a child of the autocomplete container:*/","      this.parentNode.appendChild(a);","      /*for each item in the array...*/","      for (i = 0; i < arr.length; i++) {","        /*check if the item starts with the same letters as the text field value:*/","        if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {","          /*create a DIV element for each matching element:*/","          b = document.createElement(\"DIV\");","          /*make the matching letters bold:*/","          b.innerHTML = \"<strong>\" + arr[i].substr(0, val.length) + \"</strong>\";","          b.innerHTML += arr[i].substr(val.length);","          /*insert a input field that will hold the current array item's value:*/","          b.innerHTML += \"<input type='hidden' value='\" + arr[i] + \"'>\";","          /*execute a function when someone clicks on the item value (DIV element):*/","              b.addEventListener(\"click\", function(e) {","              /*insert the value for the autocomplete text field:*/","              inp.value = this.getElementsByTagName(\"input\")[0].value;","              /*close the list of autocompleted values,","              (or any other open lists of autocompleted values:*/","              closeAllLists();","          });","          a.appendChild(b);","        }","      }","  });","  /*execute a function presses a key on the keyboard:*/","  inp.addEventListener(\"keydown\", function(e) {","      var x = document.getElementById(this.id + \"autocomplete-list\");","      if (x) x = x.getElementsByTagName(\"div\");","      if (e.keyCode == 40) {","        /*If the arrow DOWN key is pressed,","        increase the currentFocus variable:*/","        currentFocus++;","        /*and and make the current item more visible:*/","        addActive(x);","      } else if (e.keyCode == 38) { //up","        /*If the arrow UP key is pressed,","        decrease the currentFocus variable:*/","        currentFocus--;","        /*and and make the current item more visible:*/","        addActive(x);","      } else if (e.keyCode == 13) {","        /*If the ENTER key is pressed, prevent the form from being submitted,*/","        e.preventDefault();","        if (currentFocus > -1) {","          /*and simulate a click on the \"active\" item:*/","          if (x) x[currentFocus].click();","        }","      }","  });","  function addActive(x) {","    /*a function to classify an item as \"active\":*/","    if (!x) return false;","    /*start by removing the \"active\" class on all items:*/","    removeActive(x);","    if (currentFocus >= x.length) currentFocus = 0;","    if (currentFocus < 0) currentFocus = (x.length - 1);","    /*add class \"autocomplete-active\":*/","    x[currentFocus].classList.add(\"autocomplete-active\");","  }","  function removeActive(x) {","    /*a function to remove the \"active\" class from all autocomplete items:*/","    for (var i = 0; i < x.length; i++) {","      x[i].classList.remove(\"autocomplete-active\");","    }","  }","  function closeAllLists(elmnt) {","    /*close all autocomplete lists in the document,","    except the one passed as an argument:*/","    var x = document.getElementsByClassName(\"autocomplete-items\");","    for (var i = 0; i < x.length; i++) {","      if (elmnt != x[i] && elmnt != inp) {","      x[i].parentNode.removeChild(x[i]);","    }","  }","}","/*execute a function when someone clicks in the document:*/","document.addEventListener(\"click\", function (e) {","    closeAllLists(e.target);","});","} "],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":2},{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""]},{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["",""]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":3,"column":0},"end":{"row":3,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1527632302765}